Running instructions:
	1. Open command terminal. cd into assignment directory. 
	2. Compile all java files. i.e. javac *.java
	3. The usage for calculating Concordance of an input file is: 
			
			Usage: java Concordance <path> [L] 
			
			<path> 	 Path to the input text file
			L 	 Optional parameter that displays line numbers


Assumptions made: 
	1. A word does not span two lines i.e. There is no return character within a word. 
	2. A word is only composed of letters and possibly an apostrophe or a period. 
	3. A period that marks end of a sentence has no other periods or spaces for four places before it. Regex matching sentence-ending periods is "[^\\. ]{3}\\."     	
	4. Sentences are separated by periods, exclamation mark, question mark, and semicolons. Period followed by "com", "edu" or "net" don't start new sentences.
	
Code Overview:
	1. 	Concordance class handles the command line inputs, reading each line from the input file and displaying concordance found.
	2.	I used a treemap in Concordance class to map each word to a FreqAndOccur object which stores the word's frequency and line numbers where the word occurs. TreeMap ensures that the keys (here word) are in ascending order (here alphabetically). 	 
	3.	LineParser class parses an input line into words and also determines when to increase the sentence counter.
	
Drawback: 
	The Line Parser does not update the sentence counter correctly for each parsed word. This is because LineParser reads the entire line first, updates the sentenceCount and then splits the line into words. 
	One way to solve this would be to do both sentenceCount updating and splitting into words simultaneously. But given the time limitations, I found it hard to implement this method.       

 
	 	

	 
	